import React, { useState } from 'react';
import { useFormik } from 'formik';
import './GeneralInfo.css';

const requiredFields = [
  'aadharCardNo', 'appType', 'appfee', 'surname', 'studentName',
  'parentName', 'phoneNumber', 'dateofbirth', 'gender', 'joinedCampus', 'city',
  'joinyear', 'course', 'courseBatch', 'courseDates', 'fee', 'schoolState',
  'schoolDistrict', 'schooltype', 'schoolName'
];

const GeneralInfoForm = ({ onNext }) => {
  const [gender, setGender] = useState('');
  const [category, setCategory] = useState('SSC');

  const formik = useFormik({
    initialValues: {
      htno: '', aadharCardNo: '', appType: '', appfee: '', surname: '',
      studentName: '', parentName: '', phoneNumber: '', dateofbirth: '', gender: '',
      joinedCampus: '', city: '', joinyear: '', course: '', courseBatch: '',
      courseDates: '', fee: '', schoolState: '', schoolDistrict: '',
      schooltype: '', schoolName: '', additionalCourseFee: '', scoreAppNo: '', marks: ''
    },
    validate: (values) => {
      const errors = {};
      requiredFields.forEach((field) => {
        if (!values[field]) {
          errors[field] = `${field.replace(/([A-Z])/g, ' $1').trim()} is required`;
        }
      });
      return errors;
    },
    onSubmit: (values) => {
      const finalValues = { ...values, category };
      console.log('Submitted General Info:', finalValues);
      if (onNext) onNext(finalValues);
    }
  });

  const renderInput = (name, label, type = 'text') => (
    <div className="mb-3">
      <label className="form-label">{label}</label>
      <input
        type={type}
        name={name}
        className={`form-control ${formik.errors[name] && formik.touched[name] ? 'is-invalid' : ''}`}
        onChange={formik.handleChange}
        onBlur={formik.handleBlur}
        value={formik.values[name]}
        placeholder={`Enter ${label}`}
      />
      {formik.errors[name] && formik.touched[name] && (
        <div className="invalid-feedback">{formik.errors[name]}</div>
      )}
    </div>
  );

  const renderSelect = (name, label, options = []) => (
    <div className="mb-3">
      <label className="form-label">{label}</label>
      <select
        name={name}
        className={`form-select ${formik.errors[name] && formik.touched[name] ? 'is-invalid' : ''}`}
        onChange={formik.handleChange}
        onBlur={formik.handleBlur}
        value={formik.values[name]}
      >
        <option value="">Select {label}</option>
        {options.map((opt) => <option key={opt} value={opt}>{opt}</option>)}
      </select>
      {formik.errors[name] && formik.touched[name] && (
        <div className="invalid-feedback">{formik.errors[name]}</div>
      )}
    </div>
  );

  return (
    <form onSubmit={formik.handleSubmit} className="container general-info-form overflow-y-auto" style={{ maxHeight: '55vh', overflowX: 'hidden' }}>
      {/* Category Section */}
      <div className="mb-4">
        <div className="d-flex align-items-center mb-3">
          <label className="category me-2 mb-0 p-2">Category</label>
          <div className="category-line flex-grow-1"></div>
        </div>
        <div className="d-flex gap-3">
          {[
            {
              label: 'SSC',
              icon: (
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
  <path d="M14.9537 6.08173L8.14688 1.23389C8.10435 1.20371 8.0535 1.1875 8.00136 1.1875C7.94922 1.1875 7.89837 1.20371 7.85584 1.23389L1.04688 6.08173C1.01386 6.10461 0.986729 6.13499 0.967717 6.17038C0.948706 6.20577 0.93835 6.24516 0.9375 6.28532V14.5615C0.939238 14.6287 0.967178 14.6925 1.01535 14.7393C1.06351 14.7861 1.12808 14.8122 1.19525 14.812H14.8046C14.8052 14.812 14.8057 14.8117 14.8062 14.8117C14.8153 14.8116 14.8244 14.811 14.8334 14.8099C14.8359 14.8096 14.8384 14.8091 14.8409 14.8087C14.8481 14.8076 14.8552 14.8063 14.8622 14.8047C14.8648 14.8041 14.8673 14.8034 14.8699 14.8027C14.877 14.8008 14.8838 14.7986 14.8907 14.7961C14.8929 14.7953 14.8952 14.7945 14.8975 14.7936C14.9056 14.7904 14.9136 14.7867 14.9213 14.7826C14.9221 14.7823 14.9228 14.782 14.9236 14.7816C14.9317 14.7772 14.9396 14.7723 14.9471 14.767C14.9498 14.7651 14.9525 14.763 14.9551 14.761C14.96 14.7573 14.9648 14.7534 14.9694 14.7494C14.9722 14.747 14.9749 14.7445 14.9776 14.742C14.9828 14.737 14.9878 14.7318 14.9925 14.7264C14.994 14.7246 14.9956 14.7231 14.9971 14.7213C15.0032 14.7138 15.009 14.706 15.0142 14.6979C15.0147 14.6972 15.0153 14.6966 15.0157 14.6959C15.017 14.6938 15.018 14.6917 15.0193 14.6896C15.0218 14.6854 15.0243 14.6811 15.0266 14.6767C15.0282 14.6736 15.0297 14.6703 15.0312 14.6671C15.0332 14.6629 15.0351 14.6588 15.0368 14.6546C15.0383 14.6509 15.0396 14.6472 15.0409 14.6435C15.0422 14.6398 15.0436 14.6357 15.0447 14.6317C15.0459 14.6278 15.047 14.6232 15.0478 14.6189C15.0487 14.6154 15.0495 14.6118 15.0502 14.6082C15.0511 14.6034 15.0518 14.5985 15.0524 14.5937C15.0528 14.5905 15.0533 14.5874 15.0536 14.584C15.054 14.5787 15.0581 14.5734 15.0583 14.5681C15.0583 14.5659 15.0625 14.5638 15.0625 14.5616V6.28532C15.0617 6.2452 15.0515 6.20583 15.0326 6.17044C15.0137 6.13505 14.9866 6.10465 14.9537 6.08173ZM14.4597 6.3411L12.0312 8.98923V4.73482C12.0304 4.70063 12.0226 4.66696 12.0083 4.63586C11.9941 4.60475 11.9737 4.57685 11.9484 4.55382L14.4597 6.3411ZM8 1.74445L11.8857 4.52007C11.8498 4.50413 11.8106 4.49708 11.7713 4.49951H4.22869C4.18944 4.49708 4.15019 4.50413 4.11425 4.52007L8 1.74445ZM11.5312 4.99951V9.53389L9.99878 11.1979L8.13691 10.0124C8.09646 9.98677 8.04955 9.97318 8.00167 9.97322C7.95378 9.97327 7.9069 9.98695 7.8665 10.0127L6.11562 11.1298L4.46875 9.38111V4.99951H11.5312ZM4.04913 4.55382C4.02416 4.57697 4.00417 4.60495 3.99035 4.63607C3.97653 4.66718 3.96918 4.70078 3.96875 4.73482V8.84835L1.5895 6.30773L4.04913 4.55382ZM1.4375 6.87948L5.68372 11.404L1.4375 14.1218V6.87948ZM2.07628 14.312L6.21178 11.6649C6.21222 11.6646 6.21263 11.6642 6.213 11.6639L8.00028 10.5199L9.90472 11.7341C9.90503 11.7341 9.90531 11.7347 9.90559 11.7349L13.9476 14.312H2.07628ZM14.5625 14.1058L10.4297 11.4709L14.5625 6.96885V14.1058Z" fill="#727F96"/>
  <path d="M6.81278 6.9375C6.81278 7.0038 6.83912 7.06739 6.886 7.11428C6.93289 7.16116 6.99648 7.1875 7.06278 7.1875H8.09272C8.04823 7.28082 7.97827 7.35967 7.89091 7.41496C7.80356 7.47025 7.70235 7.49973 7.59897 7.5H7.06278C7.01288 7.49948 6.96398 7.51405 6.9225 7.5418C6.88102 7.56954 6.84888 7.60917 6.8303 7.65549C6.81173 7.70181 6.80757 7.75266 6.81839 7.80138C6.8292 7.8501 6.85448 7.89442 6.89091 7.92853L8.23113 9.19444C8.27937 9.24 8.34375 9.26453 8.41008 9.26263C8.47642 9.26073 8.53928 9.23256 8.58484 9.18431C8.63041 9.13606 8.65494 9.07169 8.65304 9.00536C8.65114 8.93902 8.62297 8.87616 8.57472 8.83059L7.6875 7.98997C7.90795 7.97139 8.11695 7.88388 8.28487 7.73984C8.45279 7.59581 8.57109 7.40255 8.623 7.1875H8.93666C9.00296 7.1875 9.06655 7.16116 9.11343 7.11428C9.16032 7.06739 9.18666 7.0038 9.18666 6.9375C9.18666 6.8712 9.16032 6.80761 9.11343 6.76072C9.06655 6.71384 9.00296 6.6875 8.93666 6.6875H8.62278C8.59366 6.57834 8.55078 6.47333 8.49516 6.375H8.93666C9.00296 6.375 9.06655 6.34866 9.11343 6.30178C9.16032 6.25489 9.18666 6.1913 9.18666 6.125C9.18666 6.0587 9.16032 5.99511 9.11343 5.94822C9.06655 5.90134 9.00296 5.875 8.93666 5.875H7.06278C6.99648 5.875 6.93289 5.90134 6.886 5.94822C6.83912 5.99511 6.81278 6.0587 6.81278 6.125C6.81278 6.1913 6.83912 6.25489 6.886 6.30178C6.93289 6.34866 6.99648 6.375 7.06278 6.375H7.599C7.70238 6.37528 7.80358 6.40476 7.89094 6.46005C7.9783 6.51534 8.04825 6.59418 8.09275 6.6875H7.06278C6.99648 6.6875 6.93289 6.71384 6.886 6.76072C6.83912 6.80761 6.81278 6.8712 6.81278 6.9375Z" fill="#727F96"/>
</svg>
              )
            },
            {
              label: 'Other',
              icon: (
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
  <path d="M12.0003 15.1668H10.0003C9.86772 15.1668 9.74054 15.1142 9.64677 15.0204C9.553 14.9266 9.50033 14.7994 9.50033 14.6668C9.50033 14.5342 9.553 14.407 9.64677 14.3133C9.74054 14.2195 9.86772 14.1668 10.0003 14.1668H12.0003C12.2212 14.1665 12.433 14.0786 12.5892 13.9224C12.7454 13.7662 12.8333 13.5544 12.8337 13.3335V2.66683C12.8333 2.44592 12.7454 2.23417 12.5892 2.07796C12.433 1.92176 12.2212 1.83385 12.0003 1.8335H4.00033C3.77942 1.83385 3.56766 1.92176 3.41146 2.07796C3.25526 2.23417 3.16734 2.44592 3.16699 2.66683V10.1135C3.16614 10.232 3.19141 10.3492 3.24099 10.4568C3.28277 10.55 3.34129 10.6348 3.41366 10.7068L6.62699 13.9202C6.69804 13.9916 6.78137 14.0496 6.87299 14.0915C6.98462 14.1515 7.06929 14.2517 7.10986 14.3718C7.15044 14.4919 7.14389 14.6229 7.09155 14.7383C7.03921 14.8538 6.94498 14.945 6.82792 14.9936C6.71086 15.0422 6.57971 15.0446 6.46099 15.0002C6.25941 14.909 6.07618 14.7818 5.92033 14.6248L2.70699 11.4135C2.53592 11.243 2.40016 11.0404 2.3075 10.8173C2.21484 10.5942 2.16709 10.3551 2.16699 10.1135V2.66683C2.16735 2.18071 2.36061 1.7146 2.70435 1.37086C3.04809 1.02712 3.5142 0.833849 4.00033 0.833496H12.0003C12.4864 0.833849 12.9526 1.02712 13.2963 1.37086C13.64 1.7146 13.8333 2.18071 13.8337 2.66683V13.3335C13.8333 13.8196 13.64 14.2857 13.2963 14.6295C12.9526 14.9732 12.4864 15.1665 12.0003 15.1668Z" fill="#727F96" stroke="white" stroke-width="0.24"/>
  <path d="M6.66648 15.0465C6.59494 15.0462 6.52428 15.0308 6.45915 15.0012C6.25817 14.91 6.07543 14.783 5.91981 14.6265L2.70648 11.4132C2.54979 11.2576 2.42262 11.0748 2.33115 10.8738C2.29643 10.7976 2.2814 10.714 2.28744 10.6304C2.29347 10.5469 2.32039 10.4663 2.36571 10.3959C2.41103 10.3255 2.47331 10.2676 2.54683 10.2275C2.62034 10.1874 2.70275 10.1664 2.78648 10.1665H5.99981C6.30912 10.1669 6.60567 10.2899 6.82438 10.5086C7.0431 10.7273 7.16613 11.0239 7.16648 11.3332V14.5465C7.1663 14.6791 7.11357 14.8061 7.01984 14.8999C6.92611 14.9936 6.79903 15.0463 6.66648 15.0465ZM3.87381 11.1665L6.16648 13.4592V11.3332C6.16648 11.289 6.14892 11.2466 6.11766 11.2153C6.08641 11.1841 6.04402 11.1665 5.99981 11.1665H3.87381Z" fill="#727F96" stroke="white" stroke-width="0.24"/>
  <path d="M8.66667 15.1665H8C7.86739 15.1665 7.74022 15.1138 7.64645 15.0201C7.55268 14.9263 7.5 14.7991 7.5 14.6665C7.5 14.5339 7.55268 14.4067 7.64645 14.313C7.74022 14.2192 7.86739 14.1665 8 14.1665H8.66667C8.79927 14.1665 8.92645 14.2192 9.02022 14.313C9.11399 14.4067 9.16667 14.5339 9.16667 14.6665C9.16667 14.7991 9.11399 14.9263 9.02022 15.0201C8.92645 15.1138 8.79927 15.1665 8.66667 15.1665Z" fill="#727F96" stroke="white" stroke-width="0.24"/>
  <path d="M10 11.1665C9.70333 11.1665 9.41332 11.0785 9.16665 10.9137C8.91997 10.7489 8.72771 10.5146 8.61418 10.2405C8.50065 9.96644 8.47094 9.66484 8.52882 9.37387C8.5867 9.0829 8.72956 8.81562 8.93934 8.60584C9.14912 8.39607 9.41639 8.2532 9.70737 8.19533C9.99834 8.13745 10.2999 8.16715 10.574 8.28069C10.8481 8.39422 11.0824 8.58648 11.2472 8.83315C11.412 9.07982 11.5 9.36983 11.5 9.6665C11.5 9.79911 11.4473 9.92629 11.3536 10.0201C11.2598 10.1138 11.1326 10.1665 11 10.1665C10.8674 10.1665 10.7402 10.1138 10.6464 10.0201C10.5527 9.92629 10.5 9.79911 10.5 9.6665C10.5 9.56761 10.4707 9.47094 10.4157 9.38872C10.3608 9.30649 10.2827 9.24241 10.1913 9.20457C10.1 9.16672 9.99945 9.15682 9.90246 9.17611C9.80547 9.1954 9.71637 9.24303 9.64645 9.31295C9.57652 9.38288 9.5289 9.47197 9.50961 9.56896C9.49032 9.66595 9.50022 9.76648 9.53806 9.85785C9.5759 9.94921 9.63999 10.0273 9.72222 10.0822C9.80444 10.1372 9.90111 10.1665 10 10.1665C10.1326 10.1665 10.2598 10.2192 10.3536 10.313C10.4473 10.4067 10.5 10.5339 10.5 10.6665C10.5 10.7991 10.4473 10.9263 10.3536 11.0201C10.2598 11.1138 10.1326 11.1665 10 11.1665Z" fill="#727F96" stroke="white" stroke-width="0.24"/>
  <path d="M10 13.1665C9.60228 13.1662 9.22096 13.008 8.93973 12.7268C8.6585 12.4455 8.50035 12.0642 8.5 11.6665C8.5 11.5339 8.55268 11.4067 8.64645 11.313C8.74022 11.2192 8.86739 11.1665 9 11.1665C9.13261 11.1665 9.25978 11.2192 9.35355 11.313C9.44732 11.4067 9.5 11.5339 9.5 11.6665C9.5 11.7654 9.52932 11.8621 9.58427 11.9443C9.63921 12.0265 9.7173 12.0906 9.80866 12.1284C9.90002 12.1663 10.0006 12.1762 10.0975 12.1569C10.1945 12.1376 10.2836 12.09 10.3536 12.0201C10.4235 11.9501 10.4711 11.861 10.4904 11.764C10.5097 11.6671 10.4998 11.5665 10.4619 11.4752C10.4241 11.3838 10.36 11.3057 10.2778 11.2508C10.1956 11.1958 10.0989 11.1665 10 11.1665C9.86739 11.1665 9.74022 11.1138 9.64645 11.0201C9.55268 10.9263 9.5 10.7991 9.5 10.6665C9.5 10.5339 9.55268 10.4067 9.64645 10.313C9.74022 10.2192 9.86739 10.1665 10 10.1665C10.3978 10.1665 10.7794 10.3245 11.0607 10.6058C11.342 10.8871 11.5 11.2687 11.5 11.6665C11.5 12.0643 11.342 12.4459 11.0607 12.7272C10.7794 13.0085 10.3978 13.1665 10 13.1665Z" fill="#727F96" stroke="white" stroke-width="0.24"/>
  <path d="M10 9.16667C9.86739 9.16667 9.74022 9.11399 9.64645 9.02022C9.55268 8.92645 9.5 8.79927 9.5 8.66667V8C9.5 7.86739 9.55268 7.74022 9.64645 7.64645C9.74022 7.55268 9.86739 7.5 10 7.5C10.1326 7.5 10.2598 7.55268 10.3536 7.64645C10.4473 7.74022 10.5 7.86739 10.5 8V8.66667C10.5 8.79927 10.4473 8.92645 10.3536 9.02022C10.2598 9.11399 10.1326 9.16667 10 9.16667Z" fill="#727F96" stroke="white" stroke-width="0.24"/>
  <path d="M10 13.8332C9.86739 13.8332 9.74022 13.7805 9.64645 13.6867C9.55268 13.593 9.5 13.4658 9.5 13.3332V12.6665C9.5 12.5339 9.55268 12.4067 9.64645 12.313C9.74022 12.2192 9.86739 12.1665 10 12.1665C10.1326 12.1665 10.2598 12.2192 10.3536 12.313C10.4473 12.4067 10.5 12.5339 10.5 12.6665V13.3332C10.5 13.4658 10.4473 13.593 10.3536 13.6867C10.2598 13.7805 10.1326 13.8332 10 13.8332Z" fill="#727F96" stroke="white" stroke-width="0.24"/>
  <path d="M7.33301 4.5H5.33301C5.2004 4.5 5.07322 4.44732 4.97945 4.35355C4.88569 4.25979 4.83301 4.13261 4.83301 4C4.83301 3.86739 4.88569 3.74021 4.97945 3.64645C5.07322 3.55268 5.2004 3.5 5.33301 3.5H7.33301C7.46562 3.5 7.59279 3.55268 7.68656 3.64645C7.78033 3.74021 7.83301 3.86739 7.83301 4C7.83301 4.13261 7.78033 4.25979 7.68656 4.35355C7.59279 4.44732 7.46562 4.5 7.33301 4.5Z" fill="#727F96" stroke="white" stroke-width="0.24"/>
  <path d="M9.99967 6.5H5.33301C5.2004 6.5 5.07322 6.44732 4.97945 6.35355C4.88569 6.25978 4.83301 6.13261 4.83301 6C4.83301 5.86739 4.88569 5.74022 4.97945 5.64645C5.07322 5.55268 5.2004 5.5 5.33301 5.5H9.99967C10.1323 5.5 10.2595 5.55268 10.3532 5.64645C10.447 5.74022 10.4997 5.86739 10.4997 6C10.4997 6.13261 10.447 6.25978 10.3532 6.35355C10.2595 6.44732 10.1323 6.5 9.99967 6.5Z" fill="#727F96" stroke="white" stroke-width="0.24"/>
</svg>
              )
            }
          ].map(({ label, icon }) => (
            <button
              type="button"
              key={label}
              className={`btn d-flex align-items-center gap-2 ${category === label ? 'btn-primary' : 'btn-outline-secondary'}`}
              onClick={() => setCategory(label)}
            >
              {icon}
              {label}
            </button>
          ))}
        </div>
      </div>

      {/* Grid Form */}
      <div className="row">
        <div className="col-md-4">
          {renderInput('htno', 'HT No')}
          {renderInput('appfee', 'App Fee')}
          {renderInput('parentName', 'Parent Name')}
          {renderInput('dateofbirth', 'Date Of Birth', 'date')}
          {renderSelect('joinyear', 'Join Year', ['2023', '2024'])}
          {renderInput('courseDates', 'Course Dates')}
          {renderSelect('schoolDistrict', 'School District', ['District 1', 'District 2'])}
          {renderInput('additionalCourseFee', 'Additional Course Fee')}
        </div>

        <div className="col-md-4">
          {renderInput('aadharCardNo', 'Aadhar Card No')}
          {renderInput('surname', 'Surname')}
          {renderInput('phoneNumber', 'Phone Number')}
          {renderSelect('joinedCampus', 'Joined Campus', ['Campus A', 'Campus B'])}
          {renderSelect('course', 'Course Name', ['Maths', 'Science'])}
          {renderInput('fee', 'Fee')}
          {renderSelect('schooltype', 'School Type', ['SSC', 'CBSE'])}
          {renderInput('scoreAppNo', 'Score App No')}
        </div>

        <div className="col-md-4">
          {renderInput('appType', 'App Type')}
          {renderInput('studentName', 'Student Name')}

          {/* Gender Selection */}
          <label className="form-label">Gender</label>
          <div className="d-flex gap-2 mb-3">
            {['Male', 'Female'].map((g) => (
              <button
                type="button"
                key={g}
                className={`btn ${gender === g ? 'btn-primary' : 'btn-outline-secondary'}`}
                onClick={() => {
                  setGender(g);
                  formik.setFieldValue('gender', g);
                }}
              >
                {g}
              </button>
            ))}
          </div>
          {formik.errors.gender && formik.touched.gender && (
            <div className="invalid-feedback d-block">Gender is required</div>
          )}

          {renderInput('city', 'City')}
          {renderSelect('courseBatch', 'Course Batch', ['Batch A', 'Batch B'])}
          {renderSelect('schoolState', 'School State', ['State 1', 'State 2'])}
          {renderInput('schoolName', 'School Name')}
          {renderInput('marks', 'Marks')}
        </div>
      </div>

      {/* Submit Button */}
      <div className="mt-3 d-flex justify-content-center">
        <button type="submit" className="btn btn-primary">Next <svg xmlns="http://www.w3.org/2000/svg" width="25" height="24" viewBox="0 0 25 24" fill="none">
          <path d="M5.5 11C4.94772 11 4.5 11.4477 4.5 12C4.5 12.5523 4.94772 13 5.5 13V11ZM21.2071 12.7071C21.5976 12.3166 21.5976 11.6834 21.2071 11.2929L14.8431 4.92893C14.4526 4.53841 13.8195 4.53841 13.4289 4.92893C13.0384 5.31946 13.0384 5.95262 13.4289 6.34315L19.0858 12L13.4289 17.6569C13.0384 18.0474 13.0384 18.6805 13.4289 19.0711C13.8195 19.4616 14.4526 19.4616 14.8431 19.0711L21.2071 12.7071ZM5.5 12V13H20.5V12V11H5.5V12Z" fill="white"/>
        </svg></button>
      </div>
    </form>
  );
};

export default GeneralInfoForm;
